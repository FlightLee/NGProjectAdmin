<?xml version="1.0" encoding="utf-8"?>

<configuration>
	<sqls>

		<!--查询表名信息-->
		<sql name="query_mysql_schema_info">
			<![CDATA[
                SELECT 
                    `TABLE_SCHEMA`, `TABLE_NAME`, `TABLE_COMMENT`, `CREATE_TIME`
                FROM
                    information_schema.tables
                WHERE
                    table_schema = 'ruyiadmin' and table_name not like '%ruyiadmin%'
			]]>
		</sql>

		<!--查询表名、列信息-->
		<sql name="query_mysql_schema_column_info">
			<![CDATA[
                SELECT 
                    `information_schema`.`COLUMNS`.`TABLE_SCHEMA`,
                    `information_schema`.`COLUMNS`.`TABLE_NAME`,
                    `information_schema`.`COLUMNS`.`COLUMN_NAME`,
                    `information_schema`.`COLUMNS`.`DATA_TYPE`,
                    `information_schema`.`COLUMNS`.`COLUMN_COMMENT`,
                    `information_schema`.`COLUMNS`.`IS_NULLABLE`,
                    `information_schema`.`COLUMNS`.`CHARACTER_MAXIMUM_LENGTH`
                FROM
                    `information_schema`.`COLUMNS`
                WHERE
                    `information_schema`.`COLUMNS`.`TABLE_SCHEMA` IN ('ruyiadmin')
					 AND `information_schema`.`COLUMNS`.`TABLE_NAME` IN ({0})
				ORDER BY `information_schema`.`COLUMNS`.`ORDINAL_POSITION`
			]]>
		</sql>

		<!--查询oracle表名信息-->
		<sql name="query_oracle_schema_info">
			<![CDATA[
                SELECT 
                    'ruyiadmin' AS TABLE_SCHEMA,
                    T.TABLE_NAME AS TABLE_NAME,
                    F.COMMENTS AS TABLE_COMMENT,
                    T.LAST_ANALYZED AS CREATE_TIME
                FROM
                    USER_TABLES T
                        INNER JOIN
                    USER_TAB_COMMENTS F ON T.TABLE_NAME = F.TABLE_NAME
			]]>
		</sql>

		<!--查询oracle表名、列信息-->
		<sql name="query_oracle_schema_column_info">
			<![CDATA[
                SELECT 
                    'ruyiadmin' AS TABLE_SCHEMA,
                    t.TABLE_NAME TABLE_NAME,
                    t.COLUMN_NAME COLUMN_NAME,
                    LOWER(t.DATA_TYPE) DATA_TYPE,
                    a.COMMENTS COLUMN_COMMENT,
                    CASE t.NULLABLE
                        WHEN 'N' THEN 'NO'
                        WHEN 'Y' THEN 'YES'
                    END IS_NULLABLE,
                    t.CHAR_LENGTH CHARACTER_MAXIMUM_LENGTH
                FROM
                    USER_TAB_COLUMNS t
                        LEFT JOIN
                    USER_COL_COMMENTS a ON t.table_name = a.table_NAME
                        AND t.COLUMN_NAME = a.COLUMN_NAME
                WHERE
                    t.table_name IN ({0})
                ORDER BY t.COLUMN_ID
			]]>
		</sql>

		<!--查询PostgreSQL表名信息-->
		<sql name="query_postgresql_schema_info">
			<![CDATA[
                SELECT 
                    'ruyiadmin' as TABLE_SCHEMA,
	                relname AS TABLE_NAME,
	                CAST ( obj_description ( relfilenode, 'pg_class' ) AS VARCHAR ) AS TABLE_COMMENT ,
	                TO_TIMESTAMP('2022-05-12 16:04:33', 'yyyy-mm-dd hh24:mi:ss') as CREATE_TIME
                FROM
	                pg_class C 
                WHERE
	                relname IN ( SELECT tablename FROM pg_tables WHERE schemaname = 'public')
				ORDER BY
					relname
			]]>
		</sql>

		<!--查询PostgreSQL表名、列信息-->
		<sql name="query_postgresql_schema_column_info">
			<![CDATA[
                SELECT 
                    'ruyiadmin' as TABLE_SCHEMA,
	                C	.relname TABLE_NAME,
	                A.attname COLUMN_NAME,	
	                concat_ws (	'',	T.typname,	SUBSTRING ( format_type ( A.atttypid, A.atttypmod ) FROM '\(.*\)' )) AS DATA_TYPE,
	                d.description COLUMN_COMMENT,
	                case a.attnotnull 
	                when false then 'YES'
	                when true then 'NO'
	                end
	                IS_NULLABLE,
	                (case when a.attlen >0 then a.attlen else a.atttypmod -4 end) CHARACTER_MAXIMUM_LENGTH
                FROM
	                pg_class C,
	                pg_attribute A,
	                pg_type T,
	                pg_description d 
                WHERE
	                A.attnum > 0 
	                AND A.attrelid = C.oid 
	                AND A.atttypid = T.oid 
	                AND d.objoid = A.attrelid 
	                AND d.objsubid = A.attnum 
	                AND C.relname IN ({0})
                ORDER BY
	                A.attnum
			]]>
		</sql>

		<!--查询SqlSever表名信息-->
		<sql name="query_sqlserver_schema_info">
			<![CDATA[
                SELECT DISTINCT
                    'ruyiadmin' TABLE_SCHEMA,
                    d.name TABLE_NAME,
                    f.value TABLE_COMMENT,
                    d.crdate CREATE_TIME
                FROM
                    syscolumns a
                        LEFT JOIN
                    systypes b ON a.xusertype = b.xusertype
                        INNER JOIN
                    sysobjects d ON a.id = d.id AND d.xtype = 'U'
                        AND d.name <> 'dtproperties'
                        LEFT JOIN
                    syscomments e ON a.cdefault = e.id
                        LEFT JOIN
                    sys.extended_properties g ON a.id = G.major_id
                        AND a.colid = g.minor_id
                        LEFT JOIN
                    sys.extended_properties f ON d.id = f.major_id AND f.minor_id = 0
			]]>
		</sql>

		<!--查询SqlSever表名、列信息-->
		<sql name="query_sqlserver_schema_column_info">
			<![CDATA[
                SELECT
                'ruyiadmin' TABLE_SCHEMA,
                d.name TABLE_NAME,
                a.name COLUMN_NAME,
                b.name DATA_TYPE,
                isnull(g.[value],'') COLUMN_COMMENT,
                case   when   a.isnullable=1   then   'YES'else   'NO'   end IS_NULLABLE,
                COLUMNPROPERTY(a.id,a.name,'PRECISION') CHARACTER_MAXIMUM_LENGTH
                FROM   syscolumns   a
                left   join   systypes   b   on   a.xusertype=b.xusertype
                inner   join   sysobjects   d   on   a.id=d.id     and   d.xtype='U'   and     d.name<>'dtproperties'
                left   join   syscomments   e   on   a.cdefault=e.id
                left   join   sys.extended_properties   g   on   a.id=g.major_id   and   a.colid=g.minor_id
                left   join   sys.extended_properties   f   on   d.id=f.major_id   and   f.minor_id=0
                where   d.name in ({0})
                order   by   a.id,a.colorder
			]]>
		</sql>

		<!--实体模板-->
		<sql name="template_entity">
			<![CDATA[
//-----------------------------------------------------------------------
// <Copyright file="{{EntityName}}.cs" company="RuYiAdmin">
// * Copyright (C) {{Copyright}}
// * Version : {{Version}}
// * Author  : {{Author}}
// * FileName: {{EntityName}}.cs
// * History : Created by RuYiAdmin {{DateTime}}
// </Copyright>
//-----------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using NGProjectAdmin.Entity.Base;

namespace {{EntityNamespace}}
{
    /// <summary>
    /// {{EntityName}} 实体模型
    /// </summary>   
    [Serializable]
	public class {{EntityName}}: RuYiAdminBaseEntity
    {
		{{Fields}}
	}
}
			]]>
		</sql>

		<!--DTO模板-->
		<sql name="template_dto">
			<![CDATA[
//-----------------------------------------------------------------------
// <Copyright file="{{EntityName}}DTO.cs" company="RuYiAdmin">
// * Copyright (C) {{Copyright}}
// * Version : {{Version}}
// * Author  : {{Author}}
// * FileName: {{EntityName}}DTO.cs
// * History : Created by RuYiAdmin {{DateTime}}
// </Copyright>
//-----------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace {{DTONamespace}}
{
    /// <summary>
    /// {{EntityName}}DTO模型
    /// </summary>   
	public class {{EntityName}}DTO: {{EntityName}}
    {
		//TODO:complete POCO autolly mapper to DTO when use in AutoMapperProfile
		//CreateMap<{{EntityName}}, {{EntityName}}DTO>();
	}
}
			]]>
		</sql>

		<!--控制层模板-->
		<sql name="template_controller">
			<![CDATA[
//-----------------------------------------------------------------------
// <Copyright file="{{EntityName}}ManagementController.cs" company="RuYiAdmin">
// * Copyright (C) {{Copyright}}
// * Version : {{Version}}
// * Author  : {{Author}}
// * FileName: {{EntityName}}ManagementController.cs
// * History : Created by RuYiAdmin {{DateTime}}
// </Copyright>
//-----------------------------------------------------------------------

using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using NGProjectAdmin.WebApi.AppCode.ActionFilters;
using NGProjectAdmin.WebApi.AppCode.FrameworkBase;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace {{ControllerNamespace}}
{
    /// <summary>
    /// {{EntityName}}控制器
    /// </summary>
     public class {{EntityName}}ManagementController : RuYiAdminBaseController<{{EntityName}}>
    {
        /// <summary>
        /// 业务接口实例
        /// </summary>
        private readonly I{{EntityName}}Service {{EntityName}}Service;

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="{{EntityName}}Service"></param>
        public {{EntityName}}ManagementController(I{{EntityName}}Service {{EntityName}}Service) : base({{EntityName}}Service)
        {
            this.{{EntityName}}Service = {{EntityName}}Service;
        }
    }
}
			]]>
		</sql>

		<!--服务接口模板-->
		<sql name="template_iservice">
			<![CDATA[
//-----------------------------------------------------------------------
// <Copyright file="I{{EntityName}}Service.cs" company="RuYiAdmin">
// * Copyright (C) {{Copyright}}
// * Version : {{Version}}
// * Author  : {{Author}}
// * FileName: I{{EntityName}}Service.cs
// * History : Created by RuYiAdmin {{DateTime}}
// </Copyright>
//-----------------------------------------------------------------------

using NGProjectAdmin.Service.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace {{ServiceNamespace}}
{
    /// <summary>
    /// {{EntityName}}业务层接口
    /// </summary>   
    public interface I{{EntityName}}Service : IRuYiAdminBaseService<{{EntityName}}>
    {
    }
}
			]]>
		</sql>

		<!--服务实现模板-->
		<sql name="template_service">
			<![CDATA[
//-----------------------------------------------------------------------
// <Copyright file="{{EntityName}}Service.cs" company="RuYiAdmin">
// * Copyright (C) {{Copyright}}
// * Version : {{Version}}
// * Author  : {{Author}}
// * FileName: {{EntityName}}Service.cs
// * History : Created by RuYiAdmin {{DateTime}}
// </Copyright>
//-----------------------------------------------------------------------

using NGProjectAdmin.Service.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace {{ServiceNamespace}}
{
    /// <summary>
    /// {{EntityName}}业务层实现
    /// </summary>
    public class {{EntityName}}Service : RuYiAdminBaseService<{{EntityName}}>, I{{EntityName}}Service
    {
        /// <summary>
        /// 仓储实例
        /// </summary>
        private readonly I{{EntityName}}Repository {{EntityName}}Repository;

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="{{EntityName}}Repository"></param>
        public {{EntityName}}Service(I{{EntityName}}Repository {{EntityName}}Repository) : base({{EntityName}}Repository)
        {
            this.{{EntityName}}Repository = {{EntityName}}Repository;
        }
    }
}
			]]>
		</sql>

		<!--仓储接口模板-->
		<sql name="template_irepository">
			<![CDATA[
//-----------------------------------------------------------------------
// <Copyright file="I{{EntityName}}Repository.cs" company="RuYiAdmin">
// * Copyright (C) {{Copyright}}
// * Version : {{Version}}
// * Author  : {{Author}}
// * FileName: I{{EntityName}}Repository.cs
// * History : Created by RuYiAdmin {{DateTime}}
// </Copyright>
//-----------------------------------------------------------------------

using NGProjectAdmin.Repository.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace {{RepositoryNamespace}}
{
    /// <summary>
    /// {{EntityName}}仓储层接口
    /// </summary>   
    public interface I{{EntityName}}Repository : IRuYiAdminBaseRepository<{{EntityName}}>
    {
    }
}
			]]>
		</sql>

		<!--仓储实现模板-->
		<sql name="template_repository">
			<![CDATA[
//-----------------------------------------------------------------------
// <Copyright file="{{EntityName}}Repository.cs" company="RuYiAdmin">
// * Copyright (C) {{Copyright}}
// * Version : {{Version}}
// * Author  : {{Author}}
// * FileName: {{EntityName}}Repository.cs
// * History : Created by RuYiAdmin {{DateTime}}
// </Copyright>
//-----------------------------------------------------------------------

using Microsoft.AspNetCore.Http;
using NGProjectAdmin.Repository.Base;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace {{RepositoryNamespace}}
{
    /// <summary>
    /// {{EntityName}}仓储层实现
    /// </summary>   
    public class {{EntityName}}Repository : RuYiAdminBaseRepository<{{EntityName}}>, I{{EntityName}}Repository
    {
        /// <summary>
        /// HttpContext
        /// </summary>
        private readonly IHttpContextAccessor context;

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="context"></param>
        public {{EntityName}}Repository(IHttpContextAccessor context) : base(context)
        {
            this.context = context;
        }
    }
}
			]]>
		</sql>

		<!--视图层上下布局-->
		<sql name="template_view_layout_up_down">
			<![CDATA[
<!-------------------------------------------------------------------------
// <Copyright file="{{EntityName}}Management.vue" company="RuYiAdmin">
// * Copyright (C) {{Copyright}}
// * Version : {{Version}}
// * Author  : {{Author}}
// * FileName: {{EntityName}}Management.vue
// * History : Created by RuYiAdmin {{DateTime}}
// </Copyright>
//------------------------------------------------------------------------->
<template>
  <div class="app-container">
    <el-card class="box-card">
      <el-form ref="queryForm" :model="queryForm" label-width="100px" :inline="true" border>
        <el-form-item :label="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Query.Search)" prop="keywords">
          <el-input
            v-model="queryForm.keywords"
            :placeholder="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Form.Placeholder.Keywords)"
            prefix-icon="el-icon-search"
            clearable
            @keyup.enter.native="searchData"
          />
        </el-form-item>
        <el-form-item>
          <el-button
            v-if="ButtonPermission('xyz:query:list')"
            type="success"
            size="mini"
            icon="el-icon-search"
            plain
            @click="searchData"
          >{{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Button.Search) }}
          </el-button>
          <el-button
            v-if="ButtonPermission('xyz:query:list')"
            type="warning"
            size="mini"
            icon="el-icon-refresh-left"
            plain
            @click="ResetQueryFrom"
          >{{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Button.Reset) }}
          </el-button>
        </el-form-item>
      </el-form>
      <el-row style="margin-bottom: 5px;">
        <el-col>
          <el-button
            v-if="ButtonPermission('xyz:add:entity')"
            :disabled="addDisabled"
            icon="el-icon-circle-plus-outline"
            plain
            size="mini"
            type="primary"
            @click="add"
          >
            {{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Button.Add) }}
          </el-button>
          <el-button
            v-if="ButtonPermission('xyz:edit:entity')"
            :disabled="editDisabled"
            icon="el-icon-edit"
            plain
            size="mini"
            type="success"
            @click="edit"
          >
            {{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Button.Edit) }}
          </el-button>
          <el-button
            v-if="ButtonPermission('xyz:del:entities')"
            :disabled="editDisabled"
            icon="el-icon-circle-close"
            plain
            size="mini"
            type="danger"
            @click="Delete"
          >{{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Button.Delete) }}
          </el-button>
        </el-col>
      </el-row>
      <el-table
        v-loading="loading"
        :data="tableData"
        style="width: 100%"
        stripe
        row-key="id"
        border
        :header-cell-style="{textAlign: 'center'}"
        @selection-change="HandleSelectionChange"
      >
        <el-table-column
          align="center"
          type="selection"
        />
        <el-table-column
          type="index"
          :label="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Grid.Index)"
          width="60"
          :index="IndexMethod"
          align="center"
        />
		{{GridColumns}}
        <el-table-column
          prop="createTime"
          :label="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Grid.CreateTime)"
          width="160"
        >
          <template slot-scope="scope">
            <span>{{ $moment(scope.row.createTime).format('YYYY-MM-DD HH:mm:ss') }}</span>
          </template>
        </el-table-column>
        <el-table-column
          prop="remark"
          :label="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Grid.Remark)"
        />
      </el-table>
      <div class="pagination">
        <el-pagination
          :current-page="queryCondition.PageIndex"
          :page-sizes="[10,15, 20,40,60,80,100]"
          :page-size="queryCondition.PageSize"
          layout="total, sizes, prev, pager, next, jumper"
          :total="queryCondition.TotalCount"
          @size-change="HandleSizeChange"
          @current-change="HandleCurrentChange"
        />
      </div>
      <el-dialog :title="title" :visible.sync="dialogFormVisible" class="demo-ruleForm">
        <el-card class="box-card">
          <el-form ref="form" :model="form" :rules="rules" label-width="80px" label-position="left">
		  {{FormItems}}
            <el-row>
              <el-col span="24">
                <el-form-item :label="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Grid.Remark)" prop="Remark">
                  <el-input
                    v-model="form.remark"
                    type="textarea"
                    prefix-icon="el-icon-search"
                    :placeholder="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Form.Placeholder.Remark)"
                  />
                </el-form-item>
              </el-col>
            </el-row>
          </el-form>
        </el-card>
        <div slot="footer" class="dialog-footer">
          <el-button icon="el-icon-circle-check" plain size="mini" type="success" @click="SubmitForm">
            {{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Dialog.Sure) }}
          </el-button>
          <el-button icon="el-icon-close" plain size="mini" type="danger" @click="dialogFormVisible = false">
            {{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Dialog.Cancel) }}
          </el-button>
        </div>
      </el-dialog>
    </el-card>
  </div>
</template>

<script>
import RuYiAdminBasePage from '@/components/BasePage/RuYiAdminBasePage'
import { generateQueryItem } from '@/utils/query-item'

export default {
  name: '{{EntityName}}Management',
  extends: RuYiAdminBasePage,
  data() {
    return {
      queryForm: {
        keywords: null
      },
      form: {
        id: null,
		{{Fields}}
        remark: null,
        isDel: null,
        creator: null,
        createTime: null,
        modifier: null,
        modifyTime: null
      },
      rules: {
	  {{FormRules}}
      }
    }
  },
  watch: {},
  created() {
    // window.addEventListener('storage', this.afterQRScan)
    this.url.queryList = '{{EntityName}}Management/Post'
    this.url.queryEntity = '{{EntityName}}Management/GetById/'
    this.url.addEntity = '{{EntityName}}Management/Add'
    this.url.editEntity = '{{EntityName}}Management/Put'
    this.url.deleteEntity = '{{EntityName}}Management/Delete/'
    this.url.deleteEntities = '{{EntityName}}Management/DeleteRange/'
    this.queryCondition.Sort = 'CREATE_TIME DESC'
  },
  mounted() {
  },
  destroyed() {
    // window.removeEventListener('storage', this.afterQRScan)
  },
  methods: {
    searchData: function() {
      this.queryCondition.PageIndex = 0
      this.queryCondition.QueryItems = []
      if (this.queryForm.keywords) {
        this.queryCondition.QueryItems.push(generateQueryItem(
          'Keyword',
          this.DataType.String,
          this.QueryMethod.Like,
          this.queryForm.keywords))
      }
      this.InitData()
    },
    add: function() {
      this.resetForm()
      this.title = this.BusinessLanguage.GetMenuName(this.BusinessLanguage.Common.Button.Add)
      this.form.id = this.Guid.Empty
      this.form.isDel = this.DeletionType.Undeleted
      this.form.creator = this.Guid.Empty
      this.form.createTime = this.DateTime.Default
      this.form.modifier = this.Guid.Empty
      this.form.modifyTime = this.DateTime.Default
      this.dialogFormVisible = true
    },
    edit: function() {
      this.loading = true
      this.resetForm()
      this.GetEntity(this.multipleSelection[0].id).then(response => {
        this.title = this.BusinessLanguage.GetMenuName(this.BusinessLanguage.Common.Button.Edit)
        Object.assign(this.form, response.object)
        this.dialogFormVisible = true
        this.loading = false
      })
    },
    resetForm: function () {
      this.form.id = null
      this.form.remark = null
      this.form.isDel = null
      this.form.creator = null
      this.form.createTime = null
      this.form.modifier = null
      this.form.modifyTime = null
      this.$nextTick(() => {
        this.$refs.form.resetFields()
      })
    }
  }
}
</script>

<style scoped>
.colWidth {
  width: 250px;
}
</style>
			]]>
		</sql>

		<!--视图层左右布局-->
		<sql name="template_view_layout_left_right">
			<![CDATA[
<!-------------------------------------------------------------------------
// <Copyright file="{{EntityName}}Management.vue" company="RuYiAdmin">
// * Copyright (C) {{Copyright}}
// * Version : {{Version}}
// * Author  : {{Author}}
// * FileName: {{EntityName}}Management.vue
// * History : Created by RuYiAdmin {{DateTime}}
// </Copyright>
//------------------------------------------------------------------------->
<template>
  <div class="app-container">
    <el-row :gutter="20">
      <el-col :span="6">
        <el-card class="box-card">
          <el-input
            v-model="filterText"
            :placeholder="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Form.Placeholder.KeywordsFilter)"
            clearable
          />
          <el-tree
            ref="tree"
            class="filter-tree"
            :data="data"
            :props="defaultProps"
            highlight-current
            default-expand-all
            :filter-node-method="filterNode"
            @node-click="handleNodeClick"
          />
        </el-card>
      </el-col>
      <el-col :span="18">
        <el-card class="box-card">
          <el-form ref="queryForm" :model="queryForm" label-width="100px" :inline="true" border>
            <el-form-item :label="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Query.Search)" prop="keywords">
              <el-input
                v-model="queryForm.keywords"
                :placeholder="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Form.Placeholder.Keywords)"
                prefix-icon="el-icon-search"
                clearable
                @keyup.enter.native="searchData"
              />
            </el-form-item>
            <el-form-item>
              <el-button
                v-if="ButtonPermission('xyz:query:list')"
                type="success"
                size="mini"
                icon="el-icon-search"
                plain
                @click="searchData"
              >{{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Button.Search) }}
              </el-button>
              <el-button
                v-if="ButtonPermission('xyz:query:list')"
                type="warning"
                size="mini"
                icon="el-icon-refresh-left"
                plain
                @click="ResetQueryFrom"
              >{{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Button.Reset) }}
              </el-button>
            </el-form-item>
          </el-form>
          <el-row style="margin-bottom: 5px;">
            <el-col>
              <el-button
                v-if="ButtonPermission('xyz:add:entity')"
                :disabled="addDisabled"
                icon="el-icon-circle-plus-outline"
                plain
                size="mini"
                type="primary"
                @click="add"
              >
                {{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Button.Add) }}
              </el-button>
              <el-button
                v-if="ButtonPermission('xyz:edit:entity')"
                :disabled="editDisabled"
                icon="el-icon-edit"
                plain
                size="mini"
                type="success"
                @click="edit"
              >
                {{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Button.Edit) }}
              </el-button>
              <el-button
                v-if="ButtonPermission('xyz:del:entities')"
                :disabled="editDisabled"
                icon="el-icon-circle-close"
                plain
                size="mini"
                type="danger"
                @click="Delete"
              >{{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Button.Delete) }}
              </el-button>
            </el-col>
          </el-row>
          <el-table
            v-loading="loading"
            :data="tableData"
            style="width: 100%"
            stripe
            row-key="id"
            border
            :header-cell-style="{textAlign: 'center'}"
            @selection-change="HandleSelectionChange"
          >
            <el-table-column
              align="center"
              type="selection"
            />
            <el-table-column
              type="index"
              :label="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Grid.Index)"
              width="60"
              :index="IndexMethod"
              align="center"
            />
			{{GridColumns}}
            <el-table-column
              prop="createTime"
              :label="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Grid.CreateTime)"
              width="160"
            >
              <template slot-scope="scope">
                <span>{{ $moment(scope.row.createTime).format('YYYY-MM-DD HH:mm:ss') }}</span>
              </template>
            </el-table-column>
            <el-table-column
              prop="remark"
              :label="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Grid.Remark)"
            />
          </el-table>
          <div class="pagination">
            <el-pagination
              :current-page="queryCondition.PageIndex"
              :page-sizes="[10,15, 20,40,60,80,100]"
              :page-size="queryCondition.PageSize"
              layout="total, sizes, prev, pager, next, jumper"
              :total="queryCondition.TotalCount"
              @size-change="HandleSizeChange"
              @current-change="HandleCurrentChange"
            />
          </div>
          <el-dialog :title="title" :visible.sync="dialogFormVisible" class="demo-ruleForm">
            <el-card class="box-card">
              <el-form ref="form" :model="form" :rules="rules" label-width="80px" label-position="left">
			  {{FormItems}}
                <el-row>
                  <el-col span="24">
                    <el-form-item :label="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Grid.Remark)" prop="Remark">
                      <el-input
                        v-model="form.remark"
                        type="textarea"
                        prefix-icon="el-icon-search"
                        :placeholder="BusinessLanguage.GetMenuName(BusinessLanguage.Common.Form.Placeholder.Remark)"
                      />
                    </el-form-item>
                  </el-col>
                </el-row>
              </el-form>
            </el-card>
            <div slot="footer" class="dialog-footer">
              <el-button icon="el-icon-circle-check" plain size="mini" type="success" @click="SubmitForm">
                {{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Dialog.Sure) }}
              </el-button>
              <el-button icon="el-icon-close" plain size="mini" type="danger" @click="dialogFormVisible = false">
                {{ BusinessLanguage.GetMenuName(BusinessLanguage.Common.Dialog.Cancel) }}
              </el-button>
            </div>
          </el-dialog>
        </el-card>
      </el-col>
    </el-row>
  </div>
</template>

<script>
import RuYiAdminBasePage from '@/components/BasePage/RuYiAdminBasePage'
import { generateQueryItem } from '@/utils/query-item'

export default {
  name: '{{EntityName}}Management',
  extends: RuYiAdminBasePage,
  data() {
    return {
      queryForm: {
        keywords: null
      },
      filterText: '',
      data: null,
      defaultProps: {
        children: 'children',
        label: 'xyz'
      },
      currentNode: null,
      form: {
        id: null,
		{{Fields}}
        remark: null,
        isDel: null,
        creator: null,
        createTime: null,
        modifier: null,
        modifyTime: null
      },
      rules: {
	  {{FormRules}}
      }
    }
  },
  watch: {
    filterText: function (val) {
      this.$refs.tree.filter(val)
    }
  },
  created() {
    // window.addEventListener('storage', this.afterQRScan)
    this.url.queryList = '{{EntityName}}Management/Post'
    this.url.queryEntity = '{{EntityName}}Management/GetById/'
    this.url.addEntity = '{{EntityName}}Management/Add'
    this.url.editEntity = '{{EntityName}}Management/Put'
    this.url.deleteEntity = '{{EntityName}}Management/Delete/'
    this.url.deleteEntities = '{{EntityName}}Management/DeleteRange/'
    this.queryCondition.Sort = 'CREATE_TIME DESC'
  },
  mounted() {
    this.getTreeNodes()
  },
  destroyed() {
    // window.removeEventListener('storage', this.afterQRScan)
  },
  methods: {
    searchData: function() {
      this.queryCondition.PageIndex = 0
      this.queryCondition.QueryItems = []
      if (this.queryForm.keywords) {
        this.queryCondition.QueryItems.push(generateQueryItem(
          'Keyword',
          this.DataType.String,
          this.QueryMethod.Like,
          this.queryForm.keywords))
      }
	  if (this.currentNode != null) {
        // todo
      }
      this.InitData()
    },
    add: function() {
      this.resetForm()
      this.title = this.BusinessLanguage.GetMenuName(this.BusinessLanguage.Common.Button.Add)
      this.form.id = this.Guid.Empty
      this.form.isDel = this.DeletionType.Undeleted
      this.form.creator = this.Guid.Empty
      this.form.createTime = this.DateTime.Default
      this.form.modifier = this.Guid.Empty
      this.form.modifyTime = this.DateTime.Default
      this.dialogFormVisible = true
    },
    edit: function() {
      this.loading = true
      this.resetForm()
      this.GetEntity(this.multipleSelection[0].id).then(response => {
        this.title = this.BusinessLanguage.GetMenuName(this.BusinessLanguage.Common.Button.Edit)
        Object.assign(this.form, response.object)
        this.dialogFormVisible = true
        this.loading = false
      })
    },
    resetForm: function () {
      this.form.id = null
      this.form.remark = null
      this.form.isDel = null
      this.form.creator = null
      this.form.createTime = null
      this.form.modifier = null
      this.form.modifyTime = null
      this.$nextTick(() => {
        this.$refs.form.resetFields()
      })
    },
    getTreeNodes: function() {
	  // todo
      this.RuYiAdmin.GetList('XYZ/Post', {
        PageIndex: 0, PageSize: 0, Sort: 'CreateTime DESC', TotalCount: 0, QueryItems: []
      }).then(response => {
        this.data = response.list
      })
    },
    filterNode: function (value, data) {
      if (!value) return true
      return data.xyz.indexOf(value) !== -1
    },
    handleNodeClick: function (data) {
      this.currentNode = data
      this.searchData()
    }
  }
}
</script>

<style scoped>
.colWidth {
  width: 250px;
}
</style>
			]]>
		</sql>
	</sqls>
</configuration>